Doubly linked list

#include<iostream>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
    Node* prev;

    Node(int val){
        data=val;
        next=prev=NULL;
    }
};

class DoublyList{
    Node* head;
    Node* tail;
    public:
    DoublyList(){
        head=tail=NULL;
    }

    void pushfront(int val){
        // two cases will be com first is head==null which is if condition 
        Node* newnode=new Node(val);
        if(head==NULL){
            head=tail=newnode;
        }
        else{
            newnode->next=head;
            head->prev=newnode;
            head=newnode;
        }
    }

    //push back function in doubly linked list 

    void pushback(int val){
        Node* newnode=new Node(val);
        if(tail==NULL){
        head=tail=newnode;   
        }
        else{
            newnode->prev=tail;
            tail->next=newnode;
            tail=newnode;
        }
    }

    //popfront function 

    void popfront(){
        Node* temp=head;
        head=head->next;

        if(head!=NULL){
            head->prev=NULL;
        }

        temp->next=NULL;
        delete temp;
    }

    //popback function

    void popfront(){
        Node* temp=head;
        head=head->next;

        if(head!=NULL){
            head->prev=NULL;
        }

        temp->next=NULL;
        delete temp;
    }

    void popback(){
        if(head==NULL){
            cout<<"Doubly linked list is empty"<<endl;
            return;
        }
        Node* temp=tail;
        tail=tail->prev;

        if(tail!=NULL){
            tail->next=NULL;
        }

        temp->prev=NULL;
        delete temp;
    }
    void printll(){
        Node* temp= head;

        while(temp!=NULL){
            cout<<temp->data<<"<=>";
            temp=temp->next;
        }
        cout<<"NULL"<<endl;
      }
};
int main(){
   DoublyList dl;
   dl.pushfront(1);
   dl.pushfront(2);
   dl.printll();
   dl.pushback(3);
   dl.pushback(4);
   dl.printll(); 
}
